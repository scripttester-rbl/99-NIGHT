-- ===================================================================
-- ESTRUTURA ANTI-ERRO E INICIALIZAÇÃO
-- ===================================================================
print("Iniciando Auto-Farm Script v3 (Robusto)...")

-- [ESTRUTURA ANTI-ERRO] Espera pacientemente pelo jogador local, a causa mais comum de falhas na inicialização.
local Players = game:GetService("Players")
local player = Players.LocalPlayer
if not player then
    print("DIAGNÓSTICO: Jogador local não encontrado imediatamente, aguardando...")
    player = Players.PlayerAdded:Wait()
end
print("DIAGNÓSTICO: Jogador local encontrado: " .. player.Name)

-- Espera pela interface do jogador estar pronta
local playerGui = player:WaitForChild("PlayerGui")
print("DIAGNÓSTICO: PlayerGui encontrado.")

-- ===================================================================
-- SERVIÇOS E VARIÁVEIS GLOBAIS
-- ===================================================================
local Workspace = game:GetService("Workspace")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local TeleportService = game:GetService("TeleportService")

local character
local humanoidRootPart

-- !! VERIFIQUE ESTES NOMES !!
local CHEST_NAME = "DiamondChest" 
local REMOTE_EVENT_NAME = "CollectChestEvent"

local scriptEnabled = false
local isBusy = false

-- Variáveis de timeout
local SEARCH_TIMEOUT_SECONDS = 20
local searchTimeoutCounter = 0

-- ===================================================================
-- FUNÇÃO PRINCIPAL QUE RODA APÓS A INICIALIZAÇÃO SEGURA
-- ===================================================================
local function Main()
    -- ===================================================================
    -- CRIAÇÃO DA GUI
    -- ===================================================================
    local screenGui = Instance.new("ScreenGui", playerGui)
    screenGui.ResetOnSpawn = false
    local mainFrame = Instance.new("Frame", screenGui)
    mainFrame.Size = UDim2.new(0, 200, 0, 50); mainFrame.Position = UDim2.new(0.5, -100, 0, 10)
    mainFrame.BackgroundColor3 = Color3.fromRGB(30, 30, 30); mainFrame.BorderSizePixel = 0
    local toggleButton = Instance.new("TextButton", mainFrame)
    toggleButton.Size = UDim2.new(1, 0, 1, 0); toggleButton.Text = "Auto-Farm: OFF"
    toggleButton.BackgroundColor3 = Color3.fromRGB(255, 0, 0); toggleButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    toggleButton.Font = Enum.Font.SourceSansBold; toggleButton.TextSize = 18
    print("DIAGNÓSTICO: Interface GUI criada com sucesso.")
    
    toggleButton.MouseButton1Click:Connect(function()
        scriptEnabled = not scriptEnabled
        isBusy = false
        searchTimeoutCounter = 0
        if scriptEnabled then
            toggleButton.BackgroundColor3 = Color3.fromRGB(0, 200, 0); toggleButton.Text = "Auto-Farm: ON"
            print("--> SCRIPT ATIVADO PELA GUI <--");
        else
            toggleButton.BackgroundColor3 = Color3.fromRGB(255, 0, 0); toggleButton.Text = "Auto-Farm: OFF"
            print("--> SCRIPT DESATIVADO PELA GUI <--");
        end
    end)

    -- ===================================================================
    -- FUNÇÕES DE LÓGICA
    -- ===================================================================
    local function findNearestChest()
        local nearestChest = nil
        local minDistance = math.huge
        if not humanoidRootPart then return nil end
        for _, v in ipairs(Workspace:GetDescendants()) do
            if v.Name == CHEST_NAME then
                local partPosition = v:IsA("Model") and v.PrimaryPart and v.PrimaryPart.Position or v:IsA("BasePart") and v.Position
                if partPosition then
                    local distance = (humanoidRootPart.Position - partPosition).Magnitude
                    if distance < minDistance then
                        minDistance = distance; nearestChest = v
                    end
                end
            end
        end
        return nearestChest
    end

    local function collectChestRemotely(chest)
        local remoteEvent = ReplicatedStorage:FindFirstChild(REMOTE_EVENT_NAME, true)
        if remoteEvent then
            print("DIAGNÓSTICO: RemoteEvent '" .. REMOTE_EVENT_NAME .. "' encontrado! Disparando para o servidor...")
            remoteEvent:FireServer(chest)
        else
            print("!!! ERRO CRÍTICO: Não foi possível encontrar o RemoteEvent '" .. REMOTE_EVENT_NAME .. "'. A coleta falhará.")
            isBusy = false
        end
    end

    local function serverHop()
        print("DIAGNÓSTICO: Solicitando mudança de servidor...")
        isBusy = true
        pcall(TeleportService.Teleport, TeleportService, game.PlaceId)
        task.wait(5)
        isBusy = false
    end

    -- ===================================================================
    -- LOOP PRINCIPAL
    -- ===================================================================
    while true do
        task.wait(1)

        character = player.Character or player.CharacterAdded:Wait()
        humanoidRootPart = character:WaitForChild("HumanoidRootPart")

        if not scriptEnabled or isBusy or not humanoidRootPart then
            continue
        end
        
        local chest = findNearestChest()
        
        if chest then
            isBusy = true
            searchTimeoutCounter = 0
            print("BAÚ ENCONTRADO! Nome: " .. chest.Name)
            
            collectChestRemotely(chest)
            task.wait(1) 
            serverHop()
            
            task.wait(5)
            isBusy = false
        else
            searchTimeoutCounter = searchTimeoutCounter + 1
            print("DIAGNÓSTICO: Nenhum baú encontrado. Contador de timeout: " .. searchTimeoutCounter .. "/" .. SEARCH_TIMEOUT_SECONDS)
            
            if searchTimeoutCounter >= SEARCH_TIMEOUT_SECONDS then
                print("!!! TIMEOUT ATINGIDO ("..SEARCH_TIMEOUT_SECONDS.."s)! Forçando troca de servidor. !!!")
                searchTimeoutCounter = 0
                serverHop()
            end
        end
    end
end

-- ===================================================================
-- EXECUTA A FUNÇÃO PRINCIPAL
-- ===================================================================
Main()
